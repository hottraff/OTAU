
&НаСервере
Процедура ПриОткрытииНаСервере()
		  
	  Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
	  Объект.ДатаСоздания = ТекущаяДата();
	  Объект.Наименование = Строка(Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	если Параметры.Ключ.Пустая() тогда
		ПриОткрытииНаСервере(); 
	    Объект.РазрешитьОткладыватьНа15 = истина;
		Объект.РазрешитьОткладыватьНа30 = истина;
		Объект.РазрешитьОткладыватьНа45 = истина;
		Объект.РазрешитьОткладыватьНа1час = истина;  
		ЗаполнитьСтатус();
	КонецЕсли; 
	
	если Объект.Опубликовано тогда
		ЭтаФорма.ТолькоПросмотр = истина;
		Элементы.ДобавитьФайл.Доступность=ложь;
		Элементы.ДобавитьСсылку.Доступность = ложь;
		Элементы.Отправить.Доступность = ложь;
		Элементы.ПолучателиЗаполнитьИзГруппы.Доступность = ложь;
	КонецЕсли;
	
			ВИдимостьтаймера();                                                  
       
		КонецПроцедуры 
		
		&насервере
		процедура   ЗаполнитьСтатус()
			Объект.Статус = Перечисления.СтатусУведомлений.Обычное;
			КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКОтрправкеВсех(Команда)
	Для каждого стр из Объект.Получатели цикл
		стр.ОтправитьПисьмо = истина;
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
		Для каждого стр из Объект.Получатели цикл
		стр.ОтправитьПисьмо = ложь;
		КонецЦикла;

КонецПроцедуры

&насервере
функция ПолучитьАдресаПолучателей()
	 запрос = новый запрос;
	 запрос.Текст = "ВЫБРАТЬ
	                |	УведомленияПолучатели.Пользователь.Email КАК ПользовательEmail
	                |ИЗ
	                |	Справочник.Уведомления.Получатели КАК УведомленияПолучатели
	                |ГДЕ
	                |	УведомленияПолучатели.Ссылка = &Ссылка";
запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

результат = запрос.Выполнить().Выгрузить();

если результат.Количество()>0 тогда
	массив = результат.ВыгрузитьКолонку("ПользовательEmail");
иначе
	массив = "";
КонецЕсли;

Возврат массив;
КонецФункции                                               
 





&НаСервере
Процедура ОтправитьНаСервере()  
	если Объект.ОтправитьПисьмо и Объект.IDПисьма = "" и ЗначениеЗаполнено(Константы.СистемнаяУчетнаяЗапись.Получить()) тогда
		Объект.IDПисьма =Строка(Новый УникальныйИдентификатор()); 
		АдресаПолучателей = ПолучитьАдресаПолучателей();   
		если Объект.Статус = Перечисления.СтатусУведомлений.Важное тогда
			важность = ВажностьИнтернетПочтовогоСообщения.Высокая;  
			//ИначеЕсли Объект.Статус = Перечисления.СтатусУведомлений.Срочное тогда
			//важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая;  
		иначе
		важность = ВажностьИнтернетПочтовогоСообщения.Обычная;
		КонецЕсли;
			
		если АдресаПолучателей<>"" тогда
			для каждого стр из АдресаПолучателей цикл
			СтрокаАдресаПОлучателей =                стр;
		КонецЦикла;
		
		МассивВложений=новый Массив;  
		каталогВложений = Константы.КаталогВложенийУведомлений.Получить();
		для каждого стр из Объект.Файлы цикл
		    МассивВложений.Добавить(каталогВложений+"/"+стр.IDФайла+"."+стр.ТипФайла);
		КонецЦикла;
		
		ТекстПисьма = СокрЛП(Объект.Сообщение)+"
		|";   
		ТекстСсылок=""; 
		
		 
		
		Для каждого стр из Объект.Ссылки цикл
			 ТекстСсылок = ТекстСсылок+"
			 |"+ СокрЛП(стр.наименование)+":  "  + СокрЛП(стр.СсылкаHTTP) ;
		 КонецЦикла; 
		 
		 если Объект.Ссылки.Количество()>0 тогда 
		 
		   ТекстПисьма=ТекстПисьма+ ТекстСсылок;
	   КонецЕсли;   
	   
	                   
			//попытка
			 ПочтовыйМодуль.ОтправитьПисьмо(Константы.СистемнаяУчетнаяЗапись.Получить(), "Уведомление из базы 1С", ТекстПисьма,МассивВложений ,Объект.Автор, СтрокаАдресаПОлучателей, Истина, ,,важность, Дата("00010101"),);                    
		 //исключение
		 //    КонецПопытки;
			КонецЕсли;	
	КонецЕсли; 
	
	///////упаковать файла - начало   
	МассивIDФайлов = "";
	МассивТипыФайлов = "";
	МассивИменаФайлов = "";
	массивНаименованиеСсылки = "";
	массивСсылок = "";
	
	Для каждого стр из Объект.Файлы цикл
		 МассивIDФайлов = МассивIDФайлов+стр.IDФайла+";";
		 МассивТипыФайлов= МассивТипыФайлов+стр.ТипФайла+";";
		 МассивИменаФайлов =МассивИменаФайлов+стр.Наименование+"."+стр.ТипФайла+";"; 
		
	 КонецЦикла; 
	 
	 для каждого стрссылка из Объект.Ссылки цикл
		  массивНаименованиеСсылки = массивНаименованиеСсылки+стрссылка.Наименование+ ";"; 
		  массивСсылок = массивСсылок+стрссылка.СсылкаHTTP+ ";";

     КонецЦикла;
	   	  
	/////упаковать файлы конец
	
	
	если Объект.ЗадатьВремяОповещения и Объект.ВремяОповещения.Количество()>0 тогда
	
	для каждого время из Объект.ВремяОповещения цикл 
	
			Для каждого стр из Объект.Получатели цикл 
				НаборЗаписей = РегистрыСведений.РеестрУведомлений.СоздатьНаборЗаписей();   
				
				НаборЗаписей.Отбор.IDУведмления.Установить(Объект.Наименование);
				НаборЗаписей.Отбор.Получатель.Установить(стр.Пользователь);

			    НовЗапись = НаборЗаписей.Добавить();
		        НовЗапись.Автор = Объект.Автор;
				НовЗапись.Период = Объект.ДатаСоздания;  
				НовЗапись.Получатель = стр.Пользователь;
		        НовЗапись.IDУведмления =  Объект.Наименование;
				НовЗапись.Прочитано    =  ложь;
				НовЗапись.ТребуетОтправкуНаПочту = Объект.ОтправитьПисьмо;
				НовЗапись.Сообщение   = Объект.Сообщение; 
				НовЗапись.Статус = Объект.Статус; 
				НовЗапись.IDПисьма = Объект.IDПисьма;  
				НовЗапись.ПоказатьОдинРаз = истина;
				НовЗапись.ВремяИДатаОповещения = время.ДатаИВремя;
				НовЗапись.МассивIDФайлов = МассивIDФайлов;
				НовЗапись.МассивТиповФайлов = МассивТипыФайлов;
				НовЗапись.МассивНаименованийФайлов = МассивИменаФайлов;
				НовЗапись.массивНаименованиеСсылки = массивНаименованиеСсылки;
				НовЗапись.массивСсылок = массивСсылок;
				НовЗапись.РазрешитьОткладыватьНа15 = Объект.РазрешитьОткладыватьНа15;
				НовЗапись.РазрешитьОткладыватьНа30 = Объект.РазрешитьОткладыватьНа30;
				НовЗапись.РазрешитьОткладыватьНа45 = Объект.РазрешитьОткладыватьНа45;
				НовЗапись.РазрешитьОткладыватьНа1час = Объект.РазрешитьОткладыватьНа1час;
				НовЗапись.Опубликовано = истина;
				Объект.Опубликовано = истина;

				
				НаборЗаписей.Записать(истина); 
			КонецЦикла; 
	
		КонецЦикла;  
	иначе     
			Для каждого стр из Объект.Получатели цикл
		     НаборЗаписей = РегистрыСведений.РеестрУведомлений.СоздатьНаборЗаписей();   
				
				НаборЗаписей.Отбор.IDУведмления.Установить(Объект.Наименование);
				НаборЗаписей.Отбор.Получатель.Установить(стр.Пользователь);

			    НовЗапись = НаборЗаписей.Добавить();
		        НовЗапись.Автор = Объект.Автор;
				НовЗапись.Период = Объект.ДатаСоздания;  
				НовЗапись.Получатель = стр.Пользователь;
		        НовЗапись.IDУведмления =  Объект.Наименование;
				НовЗапись.Прочитано    =  ложь;
				НовЗапись.ТребуетОтправкуНаПочту = Объект.ОтправитьПисьмо;
				НовЗапись.Сообщение   = Объект.Сообщение; 
				НовЗапись.Статус = Объект.Статус; 
				НовЗапись.IDПисьма = Объект.IDПисьма;  
				НовЗапись.ПоказатьОдинРаз = ложь;
				НовЗапись.МассивIDФайлов = МассивIDФайлов;
				НовЗапись.МассивТиповФайлов = МассивТипыФайлов;
				НовЗапись.МассивНаименованийФайлов = МассивИменаФайлов;   
				НовЗапись.массивНаименованиеСсылки = массивНаименованиеСсылки;
				НовЗапись.массивСсылок = массивСсылок;
                	НовЗапись.РазрешитьОткладыватьНа15 = Объект.РазрешитьОткладыватьНа15;
				НовЗапись.РазрешитьОткладыватьНа30 = Объект.РазрешитьОткладыватьНа30;
				НовЗапись.РазрешитьОткладыватьНа45 = Объект.РазрешитьОткладыватьНа45;
				НовЗапись.РазрешитьОткладыватьНа1час = Объект.РазрешитьОткладыватьНа1час;
				НовЗапись.Опубликовано = истина;
                Объект.Опубликовано = истина;
				
				НаборЗаписей.Записать(истина); 

		     КонецЦикла;
КонецЕсли;
	
записать();	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)  
	Записать();  
	если Объект.Получатели.Количество()=0 тогда
		сбп=Новый СообщениеПользователю;
		сбп.Текст = "Не указан получатель!";
		сбп.Поле="Получатели";
		сбп.ПутьКДанным = "Объект";
		сбп.Сообщить();
	иначе
		
	ОтправитьНаСервере();   
	Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

      


&НаКлиенте
	Процедура ЗадатьВремяОповещенияПриИзменении(Элемент)
		ВИдимостьтаймера();
	КонецПроцедуры
	
	

	
	
	
	&наклиенте
	Процедура ВИдимостьтаймера()
		если Объект.ЗадатьВремяОповещения тогда
			Элементы.ВремяОповещения.Видимость = истина;
		иначе     
			Элементы.ВремяОповещения.Видимость = ложь;
			Объект.ВремяОповещения.Очистить();
		КонецЕсли;
	КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда) 
		//НовСтр = Объект.Файлы.Добавить();
		ДобавитьВложение();

	КонецПроцедуры

 	&НаКлиенте
Процедура ДобавитьВложение()    
	
	ИмяФайла = Строка(Новый УникальныйИдентификатор());
	ЗагрузитьФайлИнтерактивно(ИмяФайла);
КонецПроцедуры



  &НаКлиенте
Процедура ЗагрузитьФайлИнтерактивно(ИмяФайла)
        
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлЗавершение", ЭтотОбъект, ИмяФайла);
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		НачатьПомещениеФайла(ОписаниеОповещения, , Диалог, Истина, УникальныйИдентификатор);

КонецПроцедуры

        &НаКлиенте
Процедура  ЗагрузитьФайлЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ИмяФайла) Экспорт
            новстр = Объект.Файлы.Добавить();  
            файлДобавлен = ложь;       
			Если Результат Тогда
				ин = 0;
				строкаОбработки = ВыбранноеИмяФайла;
				ИндексТипФайла1 = СтрНайти(строкаОбработки, ".", НаправлениеПоиска.СКонца);
				ВремСтрока = прав(строкаОбработки, СтрДлина(строкаОбработки)-ИндексТипФайла1);
                СтрокаИмяФайла = СтрНайти(строкаОбработки, "\", НаправлениеПоиска.СКонца);
				ИмяфайлаПользователя = Прав(строкаОбработки, СтрДлина(строкаОбработки)-СтрокаИмяФайла);	
				ИмяфайлаПользователя = Лев (ИмяфайлаПользователя,СтрДлина(ИмяфайлаПользователя)-СтрДлина(ВремСтрока)-1); 
				Типфайла = ВремСтрока;
				//текстр = Элементы.Файлы.ТекущиеДанные;
				новстр.ТипФайла = Типфайла;
				новстр.Наименование = ИмяфайлаПользователя;
				//ЭтотОбъект.ВременныйТипФайла = Типфайла;
				
			// Файл выбран
			//НовСтр = Элементы.Файлы.ТекущиеДанные;  
			ВыполнитьЗагрузкуНаСервере(Адрес, Типфайла, ИмяФайла);
            файлДобавлен = истина; 
			Иначе

			// Пользователь отказался от выбора файла 
			Объект.Файлы.Удалить(новстр);
			Сообщить("Файл не был выбран");
           возврат;
		КонецЕсли;
		
		
	
		новстр.IDФайла = ИмяФайла;
		
		
		
		ин = 0;
				строкаОбработки = ВыбранноеИмяФайла;
				пока ин=0 цикл
				ИндексТипФайла1 = СтрНайти(строкаОбработки, "\");
				ВремСтрока = прав(строкаОбработки, СтрДлина(строкаОбработки)-ИндексТипФайла1);
				ИндексТипФайла2 = СтрНайти(ВремСтрока, "\");
				если ИндексТипФайла2 = 0 тогда
					ин=1;
				иначе
					строкаОбработки = прав(ВремСтрока, СтрДлина(ВремСтрока)-ИндексТипФайла2);
				КонецЕсли;
			КонецЦикла;
			
			новстр.файл = ВремСтрока;
			
			если файлДобавлен тогда
			ДобавитьПолеНаФаорму (новстр.файл, новстр.IDФайла, новстр.НомерСтроки);
			КонецЕсли;
		    ЭтотОбъект.Записать();  
			
			
		  
		  
		  			
		КонецПроцедуры   
		
		
		&насервере 
		процедура ДобавитьПолеНаФаорму (ИмяФайла, IDфайла, номерстроки)
			
			родитель =  Элементы.Вложения;
			имяРодитель = "Родитель"+Строка(номерстроки);
			лРодитель = Элементы.Добавить(имяРодитель, тип("ГруппаФормы"), родитель);
			лРодитель.Заголовок =имяРодитель;
			лРодитель.Вид  = ВидГруппыФормы.ОбычнаяГруппа;
					
			лРодитель.ОтображатьЗаголовок = Ложь;  
			лРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
             Имя = "Файл"+Строка(номерстроки);   ///Строка(Объект.Файлы.Количество()-1);              
			лНовыйЭлемент                            = Элементы.Добавить(Строка(Имя)  , тип("ДекорацияФормы"), лРодитель);
			лНовыйЭлемент.Вид                   = ВидДекорацииФормы.Надпись;
			лНовыйЭлемент.Гиперссылка = Истина;
			лНовыйЭлемент.Заголовок       = ИмяФайла;

			лНовыйЭлемент.УстановитьДействие("Нажатие", "ФайлНажатие" );  
			
			
			Имя = "УдалитьФайл"+Строка(номерстроки);
			Команда		= ЭтаФорма.Команды.Добавить(Имя);
		    Команда.Действие	= "ОбработчикУдаленияФайла";

		    // Создадим кнопку и привяжем к ней команду 
			
		    Кнопка		= ЭтаФорма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), лРодитель);
		    Кнопка.Заголовок	= "УдалитьФайл";  
		
		    Кнопка.ИмяКоманды	= Имя; 
			
			Картинка = БиблиотекаКартинок.ОформлениеКрест;
			Элементы[имя].Картинка = Картинка;  
			Элементы[имя].Отображение = ОтображениеКнопки.Картинка;
			Элементы[имя].ЦветРамки = Новый Цвет(255,255,255); 
			
		КонецПроцедуры       
		
		
		&НаКлиенте
Процедура ОбработчикУдаленияФайла(Команда)
	
    СтрокаФайла = прав(Команда.Имя, СтрДлина(Команда.Имя)-11)-1;
	
	УдалитьФайлыНаСервере(СтрокаФайла) ; 
	
	

КонецПроцедуры    

 &насервере
 процедура УдалитьФайлыНаСервере(СтрокаФайла) 
	  файл =  Константы.КаталогВложенийУведомлений.Получить()+"\"+Объект.Файлы[СтрокаФайла].IDФайла+"."+Объект.Файлы[СтрокаФайла].ТипФайла;
   	  УдалитьФайлы(файл);  
	  	Объект.Файлы.Удалить(СтрокаФайла);

		
	//Элементы["Родитель"+Строка(СтрокаФайла+1)].видимость=ложь;  
	ЭтаФорма.Элементы.Удалить(Элементы["Родитель"+Строка(СтрокаФайла+1)]);   
	
	Команды.Удалить(Команды["УдалитьФайл"+Строка(СтрокаФайла+1)] );
	    Записать();
	 КонецПроцедуры


						
						
		
		
		&НаКлиенте
		Процедура ФайлНажатие(Элемент);
			
			     СтрокаФайла = прав(элемент.Имя, СтрДлина(элемент.Имя)-4)-1;
				 
				 попытка
				 СтрокаТабл = Объект.Файлы[СтрокаФайла];
	    			
						ДанныеФайла = получитьФайлИстории(СтрокаТабл.IDФайла, СтрокаТабл.ТипФайла);                                 
						Если ДанныеФайла <> Неопределено тогда
							списокКнопокВопроса = новый СписокЗначений ();
							списокКнопокВопроса.Добавить("Показать","Показать");
							списокКнопокВопроса.Добавить("Скачать","Скачать");
							списокКнопокВопроса.Добавить("Отмена","Отмена"); 
							
							СтрДанныеФайла = Новый Структура;
						  	СтрДанныеФайла.Вставить("ДанныеФайла", ДанныеФайла);
						    СтрДанныеФайла.Вставить("ТипФайла", СтрокаТабл.ТипФайла);
						    СтрДанныеФайла.Вставить("Файл", СтрокаТабл.Файл);
							СтрДанныеФайла.Вставить("IDФайла", СтрокаТабл.IDФайла);
							
							оповещение = новый ОписаниеОповещения ("ОбработатьОтветНаВопрос",ЭтотОбъект, СтрДанныеФайла);
							ПоказатьВопрос(оповещение,"Выберите действие",списокКнопокВопроса,30,"Скачать","Что хотите сделать?","Отмена");
							
						иначе
							ПоказатьПредупреждение(,"данные не найдены");
						КонецЕсли;		
				
			исключение
				КонецПопытки;

			КонецПроцедуры 
			
			
			
				         &НаКлиенте
процедура ОбработатьОтветНаВопрос (РезультатВопроса,ДополнительныеПараметры) экспорт
	
			
	ТипФайлаПольз =ДополнительныеПараметры.ТипФайла;  
	Файл = ДополнительныеПараметры.Файл ;
	
	Если РезультатВопроса = "Скачать" тогда

	времХранилище = ПоместитьВоВременноеХранилище(ДополнительныеПараметры.ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		НачатьПолучениеФайлаССервера(времХранилище, Строка(Файл));  
		
	иначеЕсли РезультатВопроса = "Показать" тогда
		//табДок = ПоказатьФайлНаСервере(ДополнительныеПараметры.IDФайла, ДополнительныеПараметры.ТипФайла, Файл );
		текДанныеФайла = получитьФайлИстории (ДополнительныеПараметры.IDФайла, ДополнительныеПараметры.ТипФайла);
		имяВрем = ПолучитьИмяВременногоФайла(ДополнительныеПараметры.ТипФайла);
		
		
		Если имяВрем<> неопределено тогда
			//табДок.Показать("Наш файл: "+Файл);
			текДанныеФайла.Записать(имяВрем);
			ЗапуститьПриложение(имяВрем)
		иначе
			ПоказатьПредупреждение(,"Невозможно отобразить файл этого типа: ."+ Строка(ДополнительныеПараметры.ТипФайла),20);
		КонецЕсли;	
		
	иначе
		возврат;
	КонецЕсли;	
	
		
КонецПроцедуры 



  
&НаСервере
функция ПоказатьФайлНаСервере(IDФайла, ТипФайла, файл)
			
		текДанныеФайла = получитьФайлИстории (IDФайла, ТипФайла);
		имяВрем = ПолучитьИмяВременногоФайла(ТипФайла);
		текДанныеФайла.Записать(имяВрем);
		//табДок.Прочитать(имяВрем);
		//табДок.ИспользуемоеИмяФайла = файл;
		возврат имяВрем;
	
	возврат неопределено;
КонецФункции





			
		&насервере
функция получитьФайлИстории (IDФайла, ТипФайла)
	
	корневойКаталог = Константы.КаталогВложенийУведомлений.Получить();

			
	файл = новый ДвоичныеДанные (корневойКаталог+"\"+IDФайла+"."+ТипФайла);
	возврат файл;	
КонецФункции
	
		
		
       &НаСервере
Процедура  ВыполнитьЗагрузкуНаСервере(Адрес, Типфайла, ИмяФайла)

	// Получение данных из временного хранилища
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	// Получение имени временного файла
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Типфайла);
	// Сохранение данных во временный файл
	Данные.Записать(ИмяВременногоФайла);

	// Обработка файла…
	чтокопируем = ИмяВременногоФайла;
	
	корневойКаталог = Константы.КаталогВложенийУведомлений.Получить();
	
	

	кудакопируем = корневойКаталог+"\"+ИмяФайла+"."+Типфайла;
	КопироватьФайл( чтокопируем, кудакопируем);

	// Хорошим тоном будет удалить временный файл
	Попытка

	УдалитьФайлы(ИмяВременногоФайла);

	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Для каждого стр из Объект.Файлы цикл
		       ДобавитьПолеНаФаорму (стр.Файл, стр.IDфайла, стр.номерстроки); 
			   
		   КонецЦикла; 
		   
		   для каждого строкассыль из Объект.Ссылки цикл
			   ДобавитьСсылкиНаФаорму (строкассыль.номерстроки, строкассыль.ссылкаhttp, строкассыль.Наименование);
			   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСсылку(Команда)
	ОткрытьФорму("Справочник.Уведомления.Форма.ФормаДобавленияСсылки",,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)  
	если ИсточникВыбора.ИмяФормы =  "Справочник.Уведомления.Форма.ФормаДобавленияСсылки" тогда 
		если ВыбранноеЗначение.Ссылка<>"" тогда
	ДобавитьСсылкуНаСервере(ВыбранноеЗначение); 
	
КонецЕсли; 

ИначеЕсли   ИсточникВыбора.ИмяФормы = "Справочник.ГруппыПользователей.Форма.ФормаВыбора"  тогда  
	если ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		 ЗаполнитьПолучателей(ВыбранноеЗначение);
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  



&насервере
процедура  ЗаполнитьПолучателей(Группа)
		Запрос = новый запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейПользователи.Пользователь.Ссылка КАК Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Пользователи КАК ГруппыПользователейПользователи
	               |ГДЕ
	               |	ГруппыПользователейПользователи.Ссылка = &группа";    
	запрос.УстановитьПараметр("группа",группа);
	
	Результат = запрос.Выполнить().Выгрузить(); 
	
	ТЗПользователи = Объект.Получатели.Выгрузить(); 
	
	для каждого стр из Результат цикл
		  новстр = ТЗПользователи.Добавить();
		  новстр.Пользователь = стр.Пользователь;
	  КонецЦикла;
	  
	  
	 Объект.Получатели.Очистить();;
	  ТЗПользователи.Свернуть("Пользователь");
	  
	  для каждого стр из ТЗПользователи цикл
		  новстр = Объект.Получатели.Добавить();
		  ЗаполнитьЗначенияСвойств(новстр, стр);
	  КонецЦикла;

	КонецПроцедуры

&насервере
процедура ДобавитьСсылкуНаСервере(ВыбранноеЗначение) 
	если ВыбранноеЗначение<>"" тогда
	    новстр = Объект.Ссылки.Добавить();
		новстр.СсылкаHTTP =  ВыбранноеЗначение.Ссылка;
		новстр.Наименование =  ВыбранноеЗначение.Наименование;
		ДобавитьСсылкиНаФаорму (новстр.номерстроки, новстр.СсылкаHTTP, новстр.Наименование)
		
	КонецЕсли;
	          записать();
КонецПроцедуры  



&насервере 
		процедура ДобавитьСсылкиНаФаорму (номерстроки, ссылкаhttp, Наименование)
			
			родитель =  Элементы.Вложения;
			имяРодитель = "РодительСсылки"+Строка(номерстроки);
			лРодитель = Элементы.Добавить(имяРодитель, тип("ГруппаФормы"), родитель);
			лРодитель.Заголовок =имяРодитель;
			лРодитель.Вид  = ВидГруппыФормы.ОбычнаяГруппа;
					
			лРодитель.ОтображатьЗаголовок = Ложь;  
			лРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
            Имя = "Ссылка"+Строка(номерстроки);                
			лНовыйЭлемент                            = Элементы.Добавить(Строка(Имя)  , тип("ДекорацияФормы"), лРодитель);
			лНовыйЭлемент.Вид                   = ВидДекорацииФормы.Надпись;
			лНовыйЭлемент.Гиперссылка = Истина;
			лНовыйЭлемент.Заголовок       = Наименование;  
		

			лНовыйЭлемент.УстановитьДействие("Нажатие", "СсылкаНажатие" );  
			
			
			Имя = "УдалитьСсылку"+Строка(номерстроки);
			Команда		= ЭтаФорма.Команды.Добавить(Имя);
		    Команда.Действие	= "ОбработчикУдаленияСсылки";

		    // Создадим кнопку и привяжем к ней команду 
			
		    Кнопка		= ЭтаФорма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), лРодитель);
		    Кнопка.Заголовок	= "УдалитьСсылку";  
		
		    Кнопка.ИмяКоманды	= Имя; 
			
			Картинка = БиблиотекаКартинок.ОформлениеКрест;
			Элементы[имя].Картинка = Картинка;  
			Элементы[имя].Отображение = ОтображениеКнопки.Картинка;
			Элементы[имя].ЦветРамки = Новый Цвет(255,255,255); 
			
		КонецПроцедуры    
		
		
			&НаКлиенте
Процедура ОбработчикУдаленияСсылки(Команда)
	
    СтрокаФайла = прав(Команда.Имя, СтрДлина(Команда.Имя)-13)-1;
	
	УдалениеСсылкиНаСервере(СтрокаФайла);  
		

КонецПроцедуры   


&Насервере
процедура УдалениеСсылкиНаСервере(СтрокаФайла)
	        
		    	
		
            ЭтаФорма.Элементы.Удалить(Элементы["РодительСсылки"+Строка(СтрокаФайла+1)]); 
				  		 // Элементы["РодительСсылки"+Строка(СтрокаФайла+1)].видимость=ложь;
	    Записать();

	КонецПроцедуры


		
		
           	&НаКлиенте
		Процедура СсылкаНажатие(Элемент);
			
			     СтрокаСсылки = прав(элемент.Имя, СтрДлина(элемент.Имя)-6)-1;
				 
				 попытка
				 СтрокаТабл = Объект.Ссылки[СтрокаСсылки];
	    		 СсылкаHttp = СтрокаТабл.СсылкаHTTP;
				 ЗапуститьПриложение(СсылкаHttp);
				
			исключение
				КонецПопытки;

			КонецПроцедуры 

&НаКлиенте
			Процедура ЗаполнитьИзГруппы(Команда)
				Новструкт = новый Структура;
				Новструкт.Вставить("РежимВыбора",Истина);
				Новструкт.Вставить("МножественныйВыбор",ложь);
				Новструкт.Вставить("ЗакрыватьПриВыборе",истина);

				ОткрытьФорму("Справочник.ГруппыПользователей.Форма.ФормаВыбора",Новструкт,ЭтаФорма);

			КонецПроцедуры

&НаКлиенте
			Процедура ПолучателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
				СвернутьДанныеВТаблице();
			КонецПроцедуры               
			
			 &насервере
			процедура СвернутьДанныеВТаблице()
				ТЗПользователи = Объект.Получатели.Выгрузить(); 
	
								  
					  
					 Объект.Получатели.Очистить();;
					  ТЗПользователи.Свернуть("Пользователь");
					  
					  для каждого стр из ТЗПользователи цикл
						  новстр = Объект.Получатели.Добавить();
						  ЗаполнитьЗначенияСвойств(новстр, стр);
					  КонецЦикла;

	  КонецПроцедуры
		



