

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)   
	СтандартнаяОбработка=ложь;       
	попытка
	АвторУведомления =Параметры.Автор;
	 IDУведмления =   Параметры.IDУведмления;
	 Сообщение =   Параметры.Сообщение;   
	 Статус =   Параметры.Статус;  
	 //Прочитано = Параметры.прочитан;
	 ПоказатьОдинРаз = параметры.ПоказатьОдинРаз; 
	 РазрешитьОткладыватьНа15 = параметры.РазрешитьОткладыватьНа15;
	 РазрешитьОткладыватьНа30 = параметры.РазрешитьОткладыватьНа30; 
	 РазрешитьОткладыватьНа45 = параметры.РазрешитьОткладыватьНа45;
	 РазрешитьОткладыватьНа1час = параметры.РазрешитьОткладыватьНа1час;
	                                                 
	 МассивIDФайлов = Разложить(Параметры.МассивIDФайлов);
	 МассивНаименованийФайлов = Разложить(Параметры.МассивНаименованийФайлов); 
	 МассивТиповФайлов = Разложить(Параметры.МассивТиповФайлов); 
	 массивНаименованиеСсылки = Разложить(Параметры.массивНаименованиеСсылки);

	 массивСсылок = Разложить(Параметры.массивСсылок);

	 нн=1;			 
	 Для н = 0 по МассивIDФайлов.ВГраница() Цикл
		 новстр = ЭтотОбъект.Файлы.Добавить();  
		 новстр.НомерСтроки =нн;
		 новстр.Наименование =МассивНаименованийФайлов[н];
		 новстр.IDфайла      = МассивIDФайлов[н];
		 новстр.ТипФайла    = МассивТиповФайлов[н];
		 нн = нн+1;
	 КонецЦикла; 
	 
	 сс=1;
	 для с=0 по массивНаименованиеСсылки.ВГраница() Цикл
		  новстр = ЭтотОбъект.СсылкиHTTP.Добавить();
		  новстр.Наименование = массивНаименованиеСсылки[с];
		  новстр.Ссылкаhttp = массивСсылок[с];
		   новстр.НомерСтроки =сс;
           сс = сс+1;
		КонецЦикла;
	 
	 
	 	Для каждого стр из ЭтотОбъект.Файлы цикл
		       ДобавитьПолеНаФаорму (стр.Наименование, стр.IDфайла, стр.номерстроки);
		   КонецЦикла; 
		   
		   для каждого строкассыль из ЭтотОбъект.СсылкиHTTP цикл
			        ДобавитьСсылкиНаФаорму (строкассыль.номерстроки, строкассыль.ссылкаhttp, строкассыль.Наименование);

			   КонецЦикла;
				 
 Исключение
	 КонецПопытки;

 КонецПроцедуры  
 
 
 &насервере 
		процедура ДобавитьСсылкиНаФаорму (номерстроки, ссылкаhttp, Наименование)
			
			родитель =  Элементы.Вложения;
			имяРодитель = "РодительСсылки"+Строка(номерстроки);
			лРодитель = Элементы.Добавить(имяРодитель, тип("ГруппаФормы"), родитель);
			лРодитель.Заголовок =имяРодитель;
			лРодитель.Вид  = ВидГруппыФормы.ОбычнаяГруппа;
					
			лРодитель.ОтображатьЗаголовок = Ложь;  
			лРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
            Имя = "Ссылка"+Строка(номерстроки);                
			лНовыйЭлемент                            = Элементы.Добавить(Строка(Имя)  , тип("ДекорацияФормы"), лРодитель);
			лНовыйЭлемент.Вид                   = ВидДекорацииФормы.Надпись;
			лНовыйЭлемент.Гиперссылка = Истина;
			лНовыйЭлемент.Заголовок       = Наименование;  
		

			лНовыйЭлемент.УстановитьДействие("Нажатие", "СсылкаНажатие" );  
			
			
					
		КонецПроцедуры    
		
		

		
		
           	&НаКлиенте
		Процедура СсылкаНажатие(Элемент);
			
			     СтрокаСсылки = прав(элемент.Имя, СтрДлина(элемент.Имя)-6)-1;
				 
				 попытка
				 СтрокаТабл = ЭтотОбъект.СсылкиHTTP[СтрокаСсылки];
	    		 СсылкаHttp = СтрокаТабл.СсылкаHTTP;
				 ЗапуститьПриложение(СсылкаHttp);
				
			исключение
				КонецПопытки;

			КонецПроцедуры 
		

 
 
 &насервере 
		процедура ДобавитьПолеНаФаорму (ИмяФайла, IDфайла, номерстроки)
			
			лРодитель =  Элементы.Вложения;
						
            Имя = "Файл"+Строка(номерстроки);   ///Строка(Объект.Файлы.Количество()-1);              
			лНовыйЭлемент                            = Элементы.Добавить(Строка(Имя)  , тип("ДекорацияФормы"), лРодитель);
			лНовыйЭлемент.Вид                   = ВидДекорацииФормы.Надпись;
			лНовыйЭлемент.Гиперссылка = Истина;
			лНовыйЭлемент.Заголовок       = ИмяФайла;

			лНовыйЭлемент.УстановитьДействие("Нажатие", "ФайлНажатие" );  
			
			
						
		    			
		КонецПроцедуры  
		
		
		&насервере
функция получитьФайлИстории (IDФайла, ТипФайла)
	
	корневойКаталог = Константы.КаталогВложенийУведомлений.Получить();

			
	файл = новый ДвоичныеДанные (корневойКаталог+"\"+IDФайла+"."+ТипФайла);
	возврат файл;	
КонецФункции



		
		
			&НаКлиенте
		Процедура ФайлНажатие(Элемент);
			
			     СтрокаФайла = прав(элемент.Имя, СтрДлина(элемент.Имя)-4)-1;
				 
				 попытка
				 СтрокаТабл = ЭтотОбъект.Файлы[СтрокаФайла];
	    			
						ДанныеФайла = получитьФайлИстории(СтрокаТабл.IDФайла, СтрокаТабл.ТипФайла);                                 
						Если ДанныеФайла <> Неопределено тогда
							списокКнопокВопроса = новый СписокЗначений ();
							списокКнопокВопроса.Добавить("Показать","Показать");
							списокКнопокВопроса.Добавить("Скачать","Скачать");
							списокКнопокВопроса.Добавить("Отмена","Отмена"); 
							
							СтрДанныеФайла = Новый Структура;
						  	СтрДанныеФайла.Вставить("ДанныеФайла", ДанныеФайла);
						    СтрДанныеФайла.Вставить("ТипФайла", СтрокаТабл.ТипФайла);
						    СтрДанныеФайла.Вставить("Файл", СтрокаТабл.наименование);
							СтрДанныеФайла.Вставить("IDФайла", СтрокаТабл.IDФайла);
							
							оповещение = новый ОписаниеОповещения ("ОбработатьОтветНаВопрос",ЭтотОбъект, СтрДанныеФайла);
							ПоказатьВопрос(оповещение,"Выберите действие",списокКнопокВопроса,30,"Скачать","Что хотите сделать?","Отмена");
							
						иначе
							ПоказатьПредупреждение(,"данные не найдены");
						КонецЕсли;		
				
			исключение
				КонецПопытки;

			КонецПроцедуры 
			
			
				
				         &НаКлиенте
процедура ОбработатьОтветНаВопрос (РезультатВопроса,ДополнительныеПараметры) экспорт
	
			
	ТипФайлаПольз =ДополнительныеПараметры.ТипФайла;  
	Файл = ДополнительныеПараметры.Файл ;
	
	Если РезультатВопроса = "Скачать" тогда

	времХранилище = ПоместитьВоВременноеХранилище(ДополнительныеПараметры.ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		НачатьПолучениеФайлаССервера(времХранилище, Строка(Файл));  
		иначеЕсли РезультатВопроса = "Показать" тогда
		//табДок = ПоказатьФайлНаСервере(ДополнительныеПараметры.IDФайла, ДополнительныеПараметры.ТипФайла, Файл );
		текДанныеФайла = получитьФайлИстории (ДополнительныеПараметры.IDФайла, ДополнительныеПараметры.ТипФайла);
		имяВрем = ПолучитьИмяВременногоФайла(ДополнительныеПараметры.ТипФайла);
		
		
		Если имяВрем<> неопределено тогда
			//табДок.Показать("Наш файл: "+Файл);
			текДанныеФайла.Записать(имяВрем);
			ЗапуститьПриложение(имяВрем)
		иначе
			ПоказатьПредупреждение(,"Невозможно отобразить файл этого типа: ."+ Строка(ДополнительныеПараметры.ТипФайла),20);
		КонецЕсли;	
		  иначе
		возврат;
	КонецЕсли;	
	
		
КонецПроцедуры



&НаСервере
функция ПоказатьФайлНаСервере(IDФайла, ТипФайла, файл)
			
		текДанныеФайла = получитьФайлИстории (IDФайла, ТипФайла);
		имяВрем = ПолучитьИмяВременногоФайла(ТипФайла);
		текДанныеФайла.Записать(имяВрем);
		//табДок.Прочитать(имяВрем);
		//табДок.ИспользуемоеИмяФайла = файл;
		возврат имяВрем;
	
	возврат неопределено;
КонецФункции




			
 
 
 &насервере
 Функция Разложить(Знач Стр, Разделитель = ";") Экспорт

		Список = Новый Массив();
		Длина = СтрДлина(Разделитель);

		Стр = СокрЛП(Стр);
		Поз = Найти(Стр, Разделитель);

		Пока 0 < Поз Цикл
		Список.Добавить(СокрП(Лев(Стр, Поз-1)));

		Стр = СокрЛ(Сред(Стр, Поз+Длина));
		Поз = Найти(Стр, Разделитель);
			
		КонецЦикла;
		
		если стр<>"" тогда
		Список.Добавить(Стр);
        КонецЕсли;
		Возврат Список;

КонецФункции //Разложить()

&НаКлиенте
Процедура Ок(Команда)

		Закрыть();
КонецПроцедуры 


&насервере
процедура ЗаписатьОПрочтении()
	         НаборЗаписей = РегистрыСведений.РеестрУведомлений.СоздатьНаборЗаписей();  			
			НаборЗаписей.Отбор.Получатель.Установить(получитьТекущПльзователя());
			НаборЗаписей.Отбор.IDУведмления.Установить(IDУведмления);
			НаборЗаписей.Прочитать();   
			
			Если НаборЗаписей.Количество() = 1 Тогда
				НовыйНомер = НаборЗаписей[0];
				НовыйНомер.Прочитано = истина; 
				НовыйНомер.ДатаПрочтения = ТекущаяДата();

			КонецЕсли;
			НаборЗаписей.Записать();
	
КонецПроцедуры
	

&НаКлиенте
Процедура ОткрытьУведомление(Команда)
	Элементы.Прочитано.Видимость = истина;
КонецПроцедуры

&насервере
Функция  получитьТекущПльзователя()  
	        возврат ПараметрыСеанса.ТекущийПользователь;
		КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	если ПоказатьОдинРаз и строка(Статус)<>"Важное" тогда
		Элементы.Открыть.Видимость = ложь;
		Элементы.Группа4.Видимость = ложь;   
	иначе
		Элементы.Открыть.Видимость = истина;
		Элементы.Группа4.Видимость = истина; 
	КонецЕсли;
	
	если РазрешитьОткладыватьНа15 тогда
		Элементы.ОтложитьНа15Минут.Доступность = истина;
	КонецЕсли;
	
	если РазрешитьОткладыватьНа30 тогда
		Элементы.ОтложитьНа30минут.Доступность = истина;
	КонецЕсли;
	
	если РазрешитьОткладыватьНа45 тогда
		Элементы.ОтложитьНа45Минут.Доступность = истина;
	КонецЕсли;
	
	если РазрешитьОткладыватьНа1час тогда
		Элементы.ОтложитьНаЧас.Доступность = истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНа15Минут(Команда)
	ОтложитьНа(15);  
	закрыть();
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()   
	если ПоказатьОдинРаз и Статус <> Перечисления.СтатусУведомлений.Важное  тогда
		Прочитано = истина;
	КонецЕсли;
	
	
		если Прочитано тогда
		
		ЗаписатьОПрочтении();
	КонецЕсли;
	
	
	           мас1 = новый массив;
			   
			   для каждого стр из ПараметрыСеанса.IDОповещений цикл 
				   если стр<>IDУведмления тогда
					 мас1.Добавить(стр);
					 КонецЕсли;
					КонецЦикла;
		  
		   
							                             			    
				ПараметрыСеанса.IDОповещений = Новый ФиксированныйМассив(мас1);     
			    
			    

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры


            &насервере 
процедура ОтложитьНа(Время)
	
	 		НаборЗаписей = РегистрыСведений.РеестрУведомлений.СоздатьНаборЗаписей();  			
			НаборЗаписей.Отбор.Получатель.Установить(получитьТекущПльзователя());
			НаборЗаписей.Отбор.IDУведмления.Установить(IDУведмления);
			НаборЗаписей.Прочитать();   
			
			Если НаборЗаписей.Количество() = 1 Тогда
				НовыйНомер = НаборЗаписей[0];
				НовыйНомер.ОтложенНа = ТекущаяДата()+время*60;

			КонецЕсли;
			НаборЗаписей.Записать(); 
				
	
	КонецПроцедуры

&НаКлиенте
	Процедура ОтложитьНа30Минут(Команда)
			ОтложитьНа(30);  
			закрыть();

	КонецПроцедуры

&НаКлиенте
	Процедура ОтложитьНа45Минут(Команда)
			ОтложитьНа(45);  
			закрыть();

	КонецПроцедуры

&НаКлиенте
	Процедура ОтложитьНаЧас(Команда)
			ОтложитьНа(60);  
	закрыть();

	КонецПроцедуры

&НаКлиенте
	Процедура ПрочитаноПриИзменении(Элемент)
		ЗАкрыть();
	КонецПроцедуры


