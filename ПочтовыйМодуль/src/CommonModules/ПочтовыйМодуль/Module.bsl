		
Функция ПолучитьСистемнуюУчетнуюЗапись() Экспорт 
		     Возврат Константы.СистемнаяУчетнаяЗапись.Получить();
КонецФункции
		
		
		
		
процедура ОтправитьПисьмо (УчетнаяЗапись,  Тема, Тело, МассивВложений, ИмяОтправителя, EmailПолучателя, УведомитьОДоставке=ложь, АдресаСкрытые="", УведомитьОПрочтении=ложь, Важность="" , времяотправки='00010101' , АдресаКопий="", IDписьма = "" )        Экспорт
			 если Константы.ОтправлятьПисьма.Получить() тогда
				Если ЗначениеЗаполнено(УчетнаяЗапись) и ЗначениеЗаполнено(УчетнаяЗапись.Пользователь) и ЗначениеЗаполнено(УчетнаяЗапись.Пароль)
								и ЗначениеЗаполнено(УчетнаяЗапись.ПользовательSMTP) и ЗначениеЗаполнено(УчетнаяЗапись.ПарольSMTP)  Тогда
								
				СтрокаМассивВложений = ""; 
				Новыймассиввложений = МассивВложений;
				МассивВложений = новый Массив;
				
				если новыймассиввложений <>Неопределено тогда
				для каждого строкавлож из новыймассиввложений цикл
					файл = строка(строкавлож);
					ИндексТипФайла = СтрНайти(файл, ".", НаправлениеПоиска.СКонца);
					Типфайла = прав(файл, СтрДлина(файл)-ИндексТипФайла+1);
					Имяфайла = строка(новый УникальныйИдентификатор());
					АДресНовогоФайла = УчетнаяЗапись.КаталогХраненияФайлов+"\"+Имяфайла+Типфайла; 
					
					индексКаталог =  СтрНайти(файл, "\", НаправлениеПоиска.СКонца);
					СтарКаталогФайла = лев(файл, индексКаталог-1);
					
					
					
					если УчетнаяЗапись.КаталогХраненияФайлов <> СтарКаталогФайла тогда
					
					 	КопироватьФайл(файл, АДресНовогоФайла);
					   файл = АДресНовогоФайла;
					 КонецЕсли;
					                                                    
					МассивВложений.Добавить(строка(файл)); 
					
			        строкаМассивВложений = строкаМассивВложений+", "+строка(файл);
				КонецЦикла;
                 КонецЕсли;
				
				
								
			  				 
				Письмо = Новый ИнтернетПочтовоеСообщение;
		
				Письмо.Тексты.Добавить(Тело);
				
				Письмо.Тема = Тема;
				
				Письмо.Отправитель = УчетнаяЗапись.Пользователь;
				
								
							
				Письмо.ИмяОтправителя = ИмяОтправителя;   
				
				АдресаСписком = СтрЗаменить(СокрЛП(EmailПолучателя),",",Символы.ПС);
				
				Для Индекс = 1 По СтрЧислоСтрок(АдресаСписком) Цикл
			        ТекущийАдрес = СтрПолучитьСтроку(АдресаСписком, Индекс);
					Письмо.Получатели.Добавить(СокрЛП(ТекущийАдрес));
				КонецЦикла;   
				
				Письмо.УведомитьОДоставке = УведомитьОДоставке;   
				Письмо.УведомитьОПрочтении = УведомитьОПрочтении;
				
				если УведомитьОПрочтении тогда
					Письмо.АдресаУведомленияОПрочтении.Добавить(УчетнаяЗапись.Пользователь); 
				КонецЕсли;

				для каждого строкавлож из МассивВложений цикл
									                                                    
					письмо.Вложения.Добавить(строкавлож);
			
				КонецЦикла;

								
				если Важность="" тогда
					Важность = ВажностьИнтернетПочтовогоСообщения.Обычная;
				КонецЕсли;
				
				Письмо.Важность =   Важность;    
	
				АдресаСкрытыеСписком =   СтрЗаменить(СокрЛП(АдресаСкрытые),",",Символы.ПС);   
				если АдресаСкрытыеСписком<>"" тогда
					Для Индекс = 1 По СтрЧислоСтрок(АдресаСкрытыеСписком) Цикл
				        ТекущийСкрытыйАдрес = СтрПолучитьСтроку(АдресаСкрытыеСписком, Индекс);
						письмо.СлепыеКопии.Добавить(СокрЛП(ТекущийСкрытыйАдрес));
					КонецЦикла; 
				КонецЕсли;
				
				
				АдресаКопийСписком =   СтрЗаменить(СокрЛП(АдресаКопий),",",Символы.ПС);   
				если АдресаКопийСписком<>"" тогда
					Для Индекс = 1 По СтрЧислоСтрок(АдресаКопийСписком) Цикл
				        ТекущийАдресКопии = СтрПолучитьСтроку(АдресаКопийСписком, Индекс);
						письмо.Копии.Добавить(СокрЛП(ТекущийАдресКопии));
					КонецЦикла; 
				КонецЕсли; 
				
				
				
				
				
				
				//Письмо.Получатели.Добавить(EmailПолучателя);
				 Ошибка = "";
				 
				 
				 
				 
				 
				 	ПрофильПодключения = Новый ИнтернетПочтовыйПрофиль;
		
					ПрофильПодключения.АдресСервераIMAP = УчетнаяЗапись.СерверВходящейПочты; 
					ПрофильПодключения.АдресСервераSMTP = УчетнаяЗапись.СерверИсходящейПочты; 
					
					ПрофильПодключения.ИспользоватьSSLIMAP = УчетнаяЗапись.ИспользоватьSSLIMAP; 
					ПрофильПодключения.ИспользоватьSSLSMTP = УчетнаяЗапись.ИспользоватьSSLSMTP; 
					
					ПрофильПодключения.ПортIMAP = УчетнаяЗапись.ПортСервераВходящейПочты; 
					ПрофильПодключения.ПортSMTP = УчетнаяЗапись.ПортСервераИсходящейПочты; 
					
					ПрофильПодключения.ПользовательIMAP = УчетнаяЗапись.Пользователь; 
					ПрофильПодключения.ПользовательSMTP = УчетнаяЗапись.ПользовательSMTP; 
					
					ПрофильПодключения.ПарольIMAP = УчетнаяЗапись.Пароль; 
					ПрофильПодключения.ПарольSMTP = УчетнаяЗапись.ПарольSMTP; 
					
					Почта = Новый ИнтернетПочта;
					
					Попытка
						Почта.Подключиться(ПрофильПодключения,ПротоколИнтернетПочты.IMAP);
					Исключение
						Сообщить("Не удалось подключиться к серверу "+ УчетнаяЗапись.СерверВходящейПочты);
						Сообщить(ОписаниеОшибки());
						Ошибка = строка(ОписаниеОшибки());
                        статус = Перечисления.СтатусИсходящихПисем.Ошибка;
						ДатаОтрпавки = ТекущаяДата();

						ЗаписатьВРегистр(УчетнаяЗапись, Тема, Тело, строкаМассивВложений, ИмяОтправителя, АдресаСписком, УведомитьОДоставке, АдресаСкрытыеСписком, УведомитьОПрочтении, Важность, статус, ДатаОтрпавки, Ошибка, времяотправки, , IDписьма   );
	
						Возврат;
					КонецПопытки;

					
					
				Попытка 
					ДатаОтрпавки = ТекущаяДата();
					если времяотправки='00010101' тогда
						Почта.Послать(Письмо);
						статус = Перечисления.СтатусИсходящихПисем.Отправлено; 
						ОтчетОбОтправке = "Отправка на адрес: "+EmailПолучателя+" завершена!";
						ИдентификаторСообщения = Письмо.ИдентификаторСообщения;
					иначе 
						ОтчетОбОтправке = "Отправка письма на адрес: "+EmailПолучателя+" отложена на: "+Строка(времяотправки);
						статус = Перечисления.СтатусИсходящихПисем.ВОжидании;

					КонецЕсли;
					
				Исключение
					Сообщить("Не удалось отправить письмо!"); 
					Ошибка = строка(ОписаниеОшибки());
					Сообщить(ОписаниеОшибки());
					статус = Перечисления.СтатусИсходящихПисем.Ошибка;
				КонецПопытки;	
				
				Почта.Отключиться();
				Сообщить(ОтчетОбОтправке);	
			Иначе
				Сообщить("Не заполнена системная учетная запись!");	
 
			КонецЕсли;
			
			ЗаписатьВРегистр(УчетнаяЗапись, Тема, Тело, строкаМассивВложений,  ИмяОтправителя, АдресаСписком, УведомитьОДоставке, АдресаСкрытыеСписком, УведомитьОПрочтении, Важность, статус, ДатаОтрпавки, Ошибка, времяотправки,  ИдентификаторСообщения  ,IDписьма   );
		КонецЕсли;
		 КонецПроцедуры
		 
		 
		 
 процедура ЗаписатьВРегистр(УчетнаяЗапись, Тема, Тело, МассивВложений, ИмяОтправителя, EmailПолучателя, УведомитьОДоставке, АдресаСкрытые, УведомитьОПрочтении, Важность, статус, ДатаОтрпавки ,Ошибка, времяотправки,  ИдентификаторСообщения ,IDписьма  )
			        МенеджерЗаписи = РегистрыСведений.ЖурналИсходящихПисем.СоздатьМенеджерЗаписи(); 
					
					МенеджерЗаписи.Период = ДатаОтрпавки; 
					МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись; 
					МенеджерЗаписи.Тема = Тема;
					МенеджерЗаписи.Тело = Тело ;
					МенеджерЗаписи.ИмяОтправителя = ИмяОтправителя ;
					МенеджерЗаписи.СтатусПисьма = статус ;
					МенеджерЗаписи.МассивВложений = МассивВложений ;
					МенеджерЗаписи.МассивПолучателей = EmailПолучателя ;
					МенеджерЗаписи.УведомитьОДоставке =  УведомитьОДоставке ;
					МенеджерЗаписи.МассивСкрытыхПолучателей = АдресаСкрытые ;
					МенеджерЗаписи.УведомитьОПрочтении =   УведомитьОПрочтении ;
					МенеджерЗаписи.Важность =  Важность ;
					МенеджерЗаписи.СообщениеОбОшибке =  Ошибка ;
					МенеджерЗаписи.ВремяОтправления = времяотправки;  
					если IDписьма="" тогда
					МенеджерЗаписи.ID = строка(новый УникальныйИдентификатор());   
				иначе
					МенеджерЗаписи.ID =IDписьма;
					КонецЕсли;
               		МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;	
					
					МенеджерЗаписи.Записать(); 
			 
 КонецПроцедуры

//процедура работает только с протоколом ИМАП
Процедура ЗагрузитьИОбработатьПочтовыеСообщения(Знач УчетнаяЗапись, тема="") Экспорт 

	Если Не СокрЛП(УчетнаяЗапись.ПротоколВходящейПочты) = "IMAP" Тогда//!!!
		Возврат;
	КонецЕсли;	

	
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
			
	Соединение = Новый ИнтернетПочта;
	Протокол = ПротоколИнтернетПочты.IMAP;
		
	Соединение.Подключиться(Профиль, Протокол);
	
	ПараметрыОтбораIMAP = Новый Структура;
	//ПараметрыОтбораIMAP.Вставить("Новые", Истина);
	
	если тема<>"" тогда 
		ПараметрыОтбораIMAP.Вставить("Тема", тема);
			
	КонецЕсли;  
	
	массивЗагруженных = ПолучитьМассивЗагруженныхПисем();
	
	
		
	МассивИдентификаторов = Соединение.ПолучитьИдентификаторы(массивЗагруженных,ПараметрыОтбораIMAP);
	
	НаборСообщений = Неопределено;
	
	Если МассивИдентификаторов.Количество()>0 Тогда
		НаборПисем = Соединение.Выбрать(не УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере, МассивИдентификаторов, Истина);
		НаборСообщений = ПолучитьАдаптированныйНаборПисем(НаборПисем);
	КонецЕсли;	
			
	Соединение.Отключиться();
	
	КаталогВложений = УчетнаяЗапись.КаталогХраненияФайлов; 
	Если Прав(СокрЛП(КаталогВложений),1) = "\" Тогда
	Иначе
		КаталогВложений = СокрЛП(КаталогВложений)+"\";
	КонецЕсли;

	
	//далеее кусок по разбору данных
	Если Не НаборСообщений = Неопределено Тогда
		
		Для Каждого СтрокаП из НаборСообщений Цикл
			
			ИдентификаторНаСервере = СокрЛП(СтрокаП.Идентификатор.Получить(0));
			//ДокПисьмо = НайтиВходящееПисьмоВБазе(ИдентификаторНаСервере, СтрокаП.ИдентификаторСообщения, СтрокаП.ДатаПолучения);
			//
			//Если ДокПисьмо = Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка() Тогда
				ДокПисьмо 	= Документы.ЭлектронноеПисьмоВходящее.СоздатьДокумент();
				
				ДокПисьмо.Дата 				=  ТекущаяДата();
				ДокПисьмо.ДатаОтправления = СтрокаП.ДатаОтправления;
				ДокПисьмо.ДатаПолучения 	= СтрокаП.ДатаПолучения;
				ДокПисьмо.Тема				= СтрокаП.Тема;
				ДокПисьмо.ОтправительАдрес	= СтрокаП.Отправитель;
				ДокПисьмо.ОтправительПредставление	= СтрокаП.ИмяОтправителя;  
				если СтрокаП.Тексты.количество()>0 тогда
					ДокПисьмо.Текст				= СтрокаП.Тексты.Получить(0).Получить("Текст");   
				КонецЕсли;
				ДокПисьмо.Кодировка			= СтрокаП.Кодировка;
				ДокПисьмо.ТипТекста			= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
				ДокПисьмо.ИдентификаторНаСервере	= ИдентификаторНаСервере;
				ДокПисьмо.ИдентификаторСообщения	= СтрокаП.ИдентификаторСообщения;
				ДокПисьмо.УчетнаяЗапись		= УчетнаяЗапись;
				ДокПисьмо.Заголовок			= СтрокаП.Заголовок;
				
				НСтрока = ДокПисьмо.ПолучателиПисьма.Добавить();
				НСтрока.Адрес	= СтрокаП.Получатели;
				
				Для Каждого ЭлВложения из СтрокаП.Вложения Цикл
					СтрокаВ = ДокПисьмо.ВложенныеФайлы.Добавить();
					СтрокаВ.ИмяФайла	= ЭлВложения.Ключ; 
					ИмяФайла	= ЭлВложения.Ключ;
					ИндексТипФайла = СтрНайти(ИмяФайла, ".");
					Типфайла = Прав(ИмяФайла, СтрДлина(ИмяФайла)-ИндексТипФайла);
				    НовИмяФайла = Строка(Новый УникальныйИдентификатор()); 	
					ИмяФайлаБезПробелов = КаталогВложений+НовИмяФайла+"."+Типфайла;
					ЭлВложения.Значение.Записать(ИмяФайлаБезПробелов);
					СтрокаВ.ПолныйПутьКФайлу = ИмяФайлаБезПробелов;

								КонецЦикла;
				/////гнее
				ДокПисьмо.Записать();
				////ДокПисьмо.РазобратьВложенныеФайлыРезультатовТестирования();
				///////
			//КонецЕсли;
			
			
			/////////////проерить на прочтение - начало
			       ЕстьПрочтено=СтрНайти(СтрокаП.Тема, "Прочтено"); 
				   
				   если ЕстьПрочтено<>0 тогда
					    ЗаписатьИнформациюОПрочтении(СтрокаП.Заголовок, СтрокаП.ДатаПолучения);
					КонецЕсли;  
					
					//Ипаавсс
					
			
			/////////// проверить на прочтение - конец  
			
			
			/////////////проерить на доставку - начало
			        ЕстьДоставлено=СтрНайти(СтрокаП.Заголовок, "MAILER-DAEMON"); 
				   
				   если ЕстьДоставлено<>0 тогда
					    ЗаписатьИнформациюОДоставке(СтрокаП.Заголовок, СтрокаП.ДатаПолучения);
					КонецЕсли;
			
			/////////////проерить на доставку - конец
			
			массивИдент = новый Массив;
			массивИдент.Добавить(СтрокаП.Идентификатор[0]);
			
			ПриоритетОтбораПисем = УчетнаяЗапись.ПриоритетОтбораПисем;
			ИмяЯщикаПервый=""; 
			ИмяЯщикаВторой="";
			
			если ПриоритетОтбораПисем = "ТемаПисьма" тогда
				ИмяЯщикаПервый = ПолучитьИмяЯщика(СтрокаП.Тема, "ТемаПисьма" );
				ИмяЯщикаВторой = ПолучитьИмяЯщика(СтрокаП.Тексты.Получить(0).Получить("Текст"), "ТелоПисьма" ); 
			иначе
				ИмяЯщикаПервый = ПолучитьИмяЯщика(СтрокаП.Тексты.Получить(0).Получить("Текст"), "ТелоПисьма" );
				ИмяЯщикаВторой = ПолучитьИмяЯщика(СтрокаП.Тема, "ТемаПисьма" );

			КонецЕсли;
			
			если ИмяЯщикаПервый <>"" тогда
				ИмяЯщика = ИмяЯщикаПервый;
			ИначеЕсли ИмяЯщикаВторой <>"" тогда   
				ИмяЯщика = ИмяЯщикаВторой;  
			иначе
				ИмяЯщика = "Прочитанные-1С";
			КонецЕсли;
				
				
			//ИмяЯщика = ПолучитьИмяЯщика(СтрокаП.Тема+СтрокаП.Тексты.Получить(0).Получить("Текст") );
			
			Соединение.Подключиться(Профиль, Протокол);
			ящик = СоздатьВернутьПочтовыйщик(Соединение, ИмяЯщика);
			Соединение.ПереместитьВПочтовыйЯщик(массивИдент, ящик);
            Соединение.Отключиться();
			
		КонецЦикла;
		
		
		//перенесем! 
				
	////	Если МассивИдентификаторов.Количество()>0 Тогда
	////		Соединение.Подключиться(Профиль, Протокол);
	////
	////	    ящик = СоздатьВернутьПочтовыйщик(Соединение, "Прочитанные-1С");
	////		Соединение.ПереместитьВПочтовыйЯщик(МассивИдентификаторов, ящик);
	////	    
	////		Соединение.Отключиться();			
	////	КонецЕсли;			
	////	
	КонецЕсли;
	
КонецПроцедуры	 


функция ПолучитьИмяЯщика(ТекстПисьма, видПоиска )  экспорт
	Имяящика=""; 
	Запрос = Новый запрос;
	Текст = "ВЫБРАТЬ
	               |	СоответствиеПисемИПочтовыхЯщиков.ФрагментТекста КАК ФрагментТекста,
	               |	СоответствиеПисемИПочтовыхЯщиков.НаименованиеЯщика КАК НаименованиеЯщика
	               |ИЗ
	               |	РегистрСведений.СоответствиеПисемИПочтовыхЯщиков КАК СоответствиеПисемИПочтовыхЯщиков"; 
	если видПоиска = "ТемаПисьма" тогда
		Текст=Текст+"
	               |ГДЕ
	               |	СоответствиеПисемИПочтовыхЯщиков.ИскатьВТемеПисьма = ИСТИНА";
	иначе
		Текст=Текст+"
	               |ГДЕ
	               |	СоответствиеПисемИПочтовыхЯщиков.ИскатьВТелеПисьма = ИСТИНА";
		КонецЕсли;
					   
	запрос.Текст = Текст;
	
	результат = запрос.Выполнить().Выгрузить();
	
	ТаблицаСоответствий = новый ТаблицаЗначений;  
	ТаблицаСоответствий.Колонки.Добавить("Текст");
	ТаблицаСоответствий.Колонки.Добавить("Ящик");
	
	для каждого стр из результат цикл
		  ТекстСписком = СтрЗаменить(СокрЛП(стр.ФрагментТекста),",",Символы.ПС);
				
				Для Индекс = 1 По СтрЧислоСтрок(ТекстСписком) Цикл
			        ТекущийТекст = СтрПолучитьСтроку(ТекстСписком, Индекс);
					Новстр = ТаблицаСоответствий.Добавить();
					Новстр.ящик = стр.НаименованиеЯщика;
					Новстр.Текст  =  СокрЛП(ТекущийТекст);
				
				КонецЦикла; 
			КонецЦикла;   
			
			Для каждого строка из ТаблицаСоответствий цикл
				ИндексСовпадения = СтрНайти(НРег(ТекстПисьма), НРег(строка.Текст));
				если ИндексСовпадения <>0 тогда
					Имяящика = строка.ящик;
					прервать;
				КонецЕсли;	
				КонецЦикла; 
				
				//если Имяящика = "" тогда
				//	Имяящика = "Прочитанные-1С";
				//КонецЕсли;
				
				Возврат Имяящика;
КонецФункции


Функция СоздатьВернутьПочтовыйщик(соединение, ИмяЯщика)
	   ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
	   ящик ="";
	   Для каждого стр из ПочтовыеЯщики цикл
		   если стр = ИмяЯщика тогда
			   ящик = стр;
			   прервать;
		   КонецЕсли; 
	   КонецЦикла;
	   
	     если ящик = "" тогда
			   Соединение.СоздатьПочтовыйЯщик(ИмяЯщика);
			   ящик = ИмяЯщика;
			КонецЕсли;

			
			возврат ящик;
КонецФункции



Процедура ЗаписатьИнформациюОПрочтении(Заголовок, ДатаПолучения)
	   Запрос = новый запрос;
	   запрос.Текст="ВЫБРАТЬ
	                |	ЖурналИсходящихПисем.ИдентификаторСообщения КАК ИдентификаторСообщения
	                |ИЗ
	                |	РегистрСведений.ЖурналИсходящихПисем КАК ЖурналИсходящихПисем
	                |ГДЕ
	                |	ЖурналИсходящихПисем.УведомитьОПрочтении = ИСТИНА
	                |	И ЖурналИсходящихПисем.ДатаПрочтения = ДАТАВРЕМЯ(1, 1, 1)" ;
	   Результат = запрос.Выполнить().Выгрузить();
	   
	   для каждого стр из Результат цикл
		   НайденИдент = СтрНайти(Заголовок, стр.ИдентификаторСообщения );
		   если НайденИдент<>0 тогда
			    НаборЗаписей = РегистрыСведений.ЖурналИсходящихПисем.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(стр.ИдентификаторСообщения);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					НаборЗаписей[0].ДатаПрочтения = ДатаПолучения;
				КонецЕсли;
				НаборЗаписей.Записать(); 
				
				прервать;
			

		   
			КонецЕсли;
			КонецЦикла;
		КонецПроцедуры  
		
		
		Процедура ЗаписатьИнформациюОДоставке(Заголовок, ДатаПолучения)
	   Запрос = новый запрос;
	   запрос.Текст="ВЫБРАТЬ
	                |	ЖурналИсходящихПисем.ИдентификаторСообщения КАК ИдентификаторСообщения
	                |ИЗ
	                |	РегистрСведений.ЖурналИсходящихПисем КАК ЖурналИсходящихПисем
	                |ГДЕ
	                |	ЖурналИсходящихПисем.УведомитьОПрочтении = ИСТИНА
	                |	И ЖурналИсходящихПисем.ДатаПрочтения = ДАТАВРЕМЯ(1, 1, 1)" ;
	   Результат = запрос.Выполнить().Выгрузить();
	   
	   для каждого стр из Результат цикл
		   НайденИдент = СтрНайти(Заголовок, стр.ИдентификаторСообщения );
		   если НайденИдент<>0 тогда
			    НаборЗаписей = РегистрыСведений.ЖурналИсходящихПисем.СоздатьНаборЗаписей();  			
				НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(стр.ИдентификаторСообщения);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 1 Тогда
					НаборЗаписей[0].ДатаДоставления = ДатаПолучения;
				КонецЕсли;
				НаборЗаписей.Записать(); 
				
				прервать;
			

		   
			КонецЕсли;
			КонецЦикла;
КонецПроцедуры



функция ПолучитьМассивЗагруженныхПисем()
	            запрос = новый запрос;
				запрос.Текст = "ВЫБРАТЬ
				               |	ЭлектронноеПисьмоВходящее.ИдентификаторНаСервере КАК ИдентификаторНаСервере
				               |ИЗ
				               |	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ЭлектронноеПисьмоВходящее.ИдентификаторНаСервере";
				Результат = запрос.Выполнить().Выгрузить();
				
				возврат Результат.ВыгрузитьКолонку("ИдентификаторНаСервере");
	
	КонецФункции


// Функция подготавливает таблицу, в которой впоследствии будут
// храниться сообщения с почтового сервера.
// 
// Параметры:
// Колонки - строка - список полей письма, через запятую, которые должны
//                    быть записаны в таблицу. Параметр меняет тип на массив.
// Возвращаемое значение
// ТаблицаЗначений - пустая таблица значений с колонками.
//
Функция СоздатьАдаптированноеОписаниеПисьма(Колонки = Неопределено)
	
	Если Колонки <> Неопределено
	   И ТипЗнч(Колонки) = Тип("Строка") Тогда
		Колонки = СтрРазделить(Колонки, ",");
		Для Индекс = 0 По Колонки.Количество()-1 Цикл
			Колонки[Индекс] = СокрЛП(Колонки[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	МассивКолонокПоУмолчанию = Новый Массив;
	МассивКолонокПоУмолчанию.Добавить("Важность");
	МассивКолонокПоУмолчанию.Добавить("Вложения");
	МассивКолонокПоУмолчанию.Добавить("ДатаОтправления");
	МассивКолонокПоУмолчанию.Добавить("ДатаПолучения");
	МассивКолонокПоУмолчанию.Добавить("Заголовок");
	МассивКолонокПоУмолчанию.Добавить("ИмяОтправителя");
	МассивКолонокПоУмолчанию.Добавить("Идентификатор");
	МассивКолонокПоУмолчанию.Добавить("Копии");
	МассивКолонокПоУмолчанию.Добавить("ОбратныйАдрес");
	МассивКолонокПоУмолчанию.Добавить("Отправитель");
	МассивКолонокПоУмолчанию.Добавить("Получатели");
	МассивКолонокПоУмолчанию.Добавить("Размер");
	МассивКолонокПоУмолчанию.Добавить("Тема");
	МассивКолонокПоУмолчанию.Добавить("Тексты");
	МассивКолонокПоУмолчанию.Добавить("Кодировка");
	МассивКолонокПоУмолчанию.Добавить("СпособКодированияНеASCIIСимволов");
	МассивКолонокПоУмолчанию.Добавить("Частичное");
	МассивКолонокПоУмолчанию.Добавить("ИдентификаторСообщения");
	
	Если Колонки = Неопределено Тогда
		Колонки = МассивКолонокПоУмолчанию;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого НаименованиеКолонки Из Колонки Цикл
		Результат.Колонки.Добавить(НаименованиеКолонки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

   
Функция ПредставлениеАдреса(ИнтернетПочтовыйАдрес)
	Результат = ИнтернетПочтовыйАдрес.Адрес;
	Если Не ПустаяСтрока(ИнтернетПочтовыйАдрес.ОтображаемоеИмя) Тогда
		Результат = ИнтернетПочтовыйАдрес.ОтображаемоеИмя + " <" + Результат + ">";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПредставлениеАдресов(ИнтернетПочтовыеАдреса)
	Результат = "";
	Для Каждого ИнтернетПочтовыйАдрес Из ИнтернетПочтовыеАдреса Цикл
		Результат = ?(ПустаяСтрока(Результат), "", Результат + "; ") + ПредставлениеАдреса(ИнтернетПочтовыйАдрес);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПредставлениеПисьма(ТемаПисьма, ДатаПисьма)
	
	ШаблонПредставления = НСтр("ru = '%1 от %2'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		?(ПустаяСтрока(ТемаПисьма), НСтр("ru = '<Без темы>'"), ТемаПисьма),
		Формат(ДатаПисьма, "ДЛФ=D"));
	
КонецФункции

   
Процедура ЗаполнитьВложенияПоПисьму(Вложения, Письмо)
	
	Для Каждого Вложение Из Письмо.Вложения Цикл
		ИмяВложения = Вложение.Имя;
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			Вложения.Вставить(Вложение.Имя, Вложение.Данные);
		Иначе
			ЗаполнитьВложенияПоПисьму(Вложения, Вложение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеПисьма = ПредставлениеПисьма(Письмо.Тема, Письмо.ДатаОтправления);
	
	Индекс = 0;
	Для Каждого Текст Из Письмо.Тексты Цикл
		Если Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			Расширение = "html";
		ИначеЕсли Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Расширение = "txt";
		Иначе
			Расширение = "rtf";
		КонецЕсли;
		ИмяТекстаВложения = "";
		Пока ИмяТекстаВложения = "" Или Вложения.Получить(ИмяТекстаВложения) <> Неопределено Цикл
			Индекс = Индекс + 1;
			ИмяТекстаВложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 - (%2).%3", ПредставлениеПисьма, Индекс, Расширение);
		КонецЦикла;
		Вложения.Вставить(ИмяТекстаВложения, Текст.Данные);
	КонецЦикла;
	
КонецПроцедуры


// Функция записывает адаптированный набор писем по переданным колонкам.
// Значения колонок, типы которых не поддерживаются для оперирования на клиенте
// преобразуются к строковому виду.
//
Функция ПолучитьАдаптированныйНаборПисем(Знач НаборПисем, Знач Колонки = Неопределено)
	
	Результат = СоздатьАдаптированноеОписаниеПисьма(Колонки);
	
	Для Каждого ПочтовоеСообщение Из НаборПисем Цикл
		НоваяСтрока = Результат.Добавить();
		Для Каждого НаименованиеКолонки Из Колонки Цикл
			ПолеПисьма = ПочтовоеСообщение[НаименованиеКолонки];
			
			Если ТипЗнч(ПолеПисьма) = Тип("Строка") Тогда
				ПолеПисьма = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыеАдреса") Тогда
				ПолеПисьма = ПредставлениеАдресов(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыйАдрес") Тогда
				ПолеПисьма = ПредставлениеАдреса(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыеВложения") Тогда
				Вложения = Новый Соответствие;
				Для Каждого Вложение Из ПолеПисьма Цикл
					Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
						Вложения.Вставить(Вложение.Имя, Вложение.Данные);
					Иначе
						ЗаполнитьВложенияПоПисьму(Вложения, Вложение.Данные);
					КонецЕсли;
				КонецЦикла;
				ПолеПисьма = Вложения;
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетТекстыПочтовогоСообщения") Тогда
				Тексты = Новый Массив;
				Для Каждого ОчереднойТекст Из ПолеПисьма Цикл
					ОписаниеТекста = Новый Соответствие;
					ОписаниеТекста.Вставить("Данные", ОчереднойТекст.Данные);
					ОписаниеТекста.Вставить("Кодировка", ОчереднойТекст.Кодировка);
					ОписаниеТекста.Вставить("Текст", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ОчереднойТекст.Текст));
					ОписаниеТекста.Вставить("ТипТекста", Строка(ОчереднойТекст.ТипТекста));
					Тексты.Добавить(ОписаниеТекста);
				КонецЦикла;
				ПолеПисьма = Тексты;
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ВажностьИнтернетПочтовогоСообщения")
				Или ТипЗнч(ПолеПисьма) = Тип("СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения") Тогда
				ПолеПисьма = Строка(ПолеПисьма);
			КонецЕсли;
			
			НоваяСтрока[НаименованиеКолонки] = ПолеПисьма;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	ЛОЖЬ КАК ИспользоватьSSLPOP3,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	ЛОЖЬ КАК ИспользоватьSSLSMTP,
	|	ЛОЖЬ КАК POP3ПередSMTP,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	ЛОЖЬ КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол,
	|	УчетныеЗаписиЭлектроннойПочты.Пароль КАК Пароль,
	|	УчетныеЗаписиЭлектроннойПочты.ПарольSMTP КАК ПарольSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.Пароль КАК ПарольIMAP
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP,ТолькоЗащищеннаяАутентификацияIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь,ТолькоЗащищеннаяАутентификацияPOP3";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP,ТолькоЗащищеннаяАутентификацияSMTP";
		
		//УстановитьПривилегированныйРежим(Истина);
		//Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		//УстановитьПривилегированныйРежим(Ложь);//мы пароль прямо в таблице храним не запаковывая его в ХЗ
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = Выборка.ПарольIMAP;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = Выборка.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Результат.ПарольSMTP = Выборка.ПарольSMTP;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = Выборка.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP =Выборка.ПарольIMAP;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Процедура ОтправитьОтложенныеПисьма () Экспорт 
	
	
	Запрос = новый запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	УчетныеЗаписиНаАвтоОтправлениеПисем.УчетнаяЗапись КАК УчетнаяЗапись
	                |ПОМЕСТИТЬ ТЗУчетки
	                |ИЗ
	                |	РегистрСведений.УчетныеЗаписиНаАвтоОтправлениеПисем КАК УчетныеЗаписиНаАвтоОтправлениеПисем
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЖурналИсходящихПисем.Период КАК Период,
	                |	ТЗУчетки.УчетнаяЗапись КАК УчетнаяЗапись,
	                |	ЖурналИсходящихПисем.Тема КАК Тема,
	                |	ЖурналИсходящихПисем.ИмяОтправителя КАК ИмяОтправителя,
	                |	ЖурналИсходящихПисем.СтатусПисьма КАК СтатусПисьма,
	                |	ЖурналИсходящихПисем.Тело КАК Тело,
	                |	ЖурналИсходящихПисем.МассивВложений КАК МассивВложений,
	                |	ЖурналИсходящихПисем.МассивПолучателей КАК МассивПолучателей,
	                |	ЖурналИсходящихПисем.УведомитьОДоставке КАК УведомитьОДоставке,
	                |	ЖурналИсходящихПисем.МассивСкрытыхПолучателей КАК МассивСкрытыхПолучателей,
	                |	ЖурналИсходящихПисем.УведомитьОПрочтении КАК УведомитьОПрочтении,
	                |	ЖурналИсходящихПисем.Важность КАК Важность,
	                |	ЖурналИсходящихПисем.СообщениеОбОшибке КАК СообщениеОбОшибке,
	                |	ЖурналИсходящихПисем.ВремяОтправления КАК ВремяОтправления,
	                |	ЖурналИсходящихПисем.ID КАК ID
	                |ИЗ
	                |	ТЗУчетки КАК ТЗУчетки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналИсходящихПисем КАК ЖурналИсходящихПисем
	                |		ПО ТЗУчетки.УчетнаяЗапись = ЖурналИсходящихПисем.УчетнаяЗапись
	                |ГДЕ
	                |	ЖурналИсходящихПисем.ВремяОтправления <= &Период
	                |	И ЖурналИсходящихПисем.СтатусПисьма = &Отложеное" ;  
	Запрос.УстановитьПараметр("Отложеное", Перечисления.СтатусИсходящихПисем.ВОжидании);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());

	результат = запрос.Выполнить().Выгрузить();
	
	Для каждого Мстр из  результат цикл 
		 МассивВложений  = новый Массив;
		 МассивВложенийСписком = СтрЗаменить(СокрЛП(Мстр.МассивВложений),",",Символы.ПС);
		 
				Для Индекс = 1 По СтрЧислоСтрок(МассивВложенийСписком) Цикл
			        ТекущееВложение = СтрПолучитьСтроку(МассивВложенийСписком, Индекс); 
					если ТекущееВложение<>"" тогда
						МассивВложений.Добавить(СокрЛП(ТекущееВложение)); 
					КонецЕсли;
				КонецЦикла; 
				
				
				
				если Мстр.Важность = "Высокая" тогда
				Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
			иначеесли Мстр.Важность = "Наивысшая" тогда
				Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая;
			иначеесли Мстр.Важность = "Наименьшая" тогда
				Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая;
			иначеесли Мстр.Важность = "Низкая" тогда
				Важность = ВажностьИнтернетПочтовогоСообщения.Низкая;
			иначе
				Важность = ВажностьИнтернетПочтовогоСообщения.Обычная; 
			КонецЕсли;

	
	                     
					
					
					
				ПочтовыйМодуль.ОтправитьПисьмо(Мстр.УчетнаяЗапись, Мстр.Тема,Мстр.Тело, МассивВложений, Мстр.ИмяОтправителя, Мстр.МассивПолучателей, Мстр.УведомитьОДоставке, Мстр.МассивСкрытыхПолучателей, Мстр.УведомитьОПрочтении, Важность,,);
		
				
			НаборЗаписей = РегистрыСведений.ЖурналИсходящихПисем.СоздатьНаборЗаписей();  			
			НаборЗаписей.Отбор.Период.Установить(Мстр.период);
			НаборЗаписей.Отбор.ID.Установить(Мстр.ID);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].СтатусПисьма = Перечисления.СтатусИсходящихПисем.СнятоСОжидания;
			КонецЕсли;
			НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры




Процедура ПолучитьПочту() экспорт   
	
	Запрос = новый запрос;
	запрос.Текст ="ВЫБРАТЬ
	              |	УчетныеЗаписиНаАвтополучениеПисем.УчетнаяЗапись КАК УчетнаяЗапись
	              |ИЗ
	              |	РегистрСведений.УчетныеЗаписиНаАвтополучениеПисем КАК УчетныеЗаписиНаАвтополучениеПисем";
	результат = запрос.Выполнить().Выгрузить();
	
	Для каждого стр из результат цикл
		ПочтовыйМодуль.ЗагрузитьИОбработатьПочтовыеСообщения(стр.УчетнаяЗапись); 
		
	КонецЦикла;
 КонецПроцедуры
	

